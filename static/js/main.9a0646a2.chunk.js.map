{"version":3,"sources":["components/GlobalParams.js","components/ConvictionVoting.js","App.js","components/TimeLine.js","serviceWorker.js","index.js","components/convictionlib.js","logo.svg"],"names":["Me","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","globalparams","_this2","react_default","a","createElement","className","alpha","step","min","max","value","type","onChange","e","setState","assign","target","totaltime","convictionthreshold","Component","proposal","currenttime","convictiontresholdpassed","stakeHistory","timeline","undefined","plot","recalc","restart","newProps","i","g","b","concat","_this3","interval","setInterval","newTime","console","log","clearInterval","t","desc","_this4","labels","push","datasets","convictions","reduce","accum","user","userindex","y0","x","data","data_accent","localt","stakeIndex","y1","convictionlib","getConviction","y1_accent","getConviction_old","stakes","length","time","action","tokensstaked","name","label","fill","borderColor","makecolor","totalconvictiondata","_loop","total","accumulator","currentValue","convictionthreshold_below","sort","_this5","map","item","key","es","onClick","App","proposals","timecreated","id","votes","ConvictionVoting","GlobalParams","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","D","Math","pow","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9a0646a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./sim.css\";\n\nclass Me extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      globalparams: props.globalparams\n    };\n  }\n\n  //   componentWillReceiveProps(newProps) {\n  //     this.setState({ globalparams: newProps.globalparams });\n  //   }\n\n  componentWillMount() {}\n\n  render() {\n    return (\n      <div className=\"container\">\n        {/* <section className=\"hero is-info welcome is-small\">\n          <div className=\"card\">\n            <header className=\"card-header\">\n              <p className=\"card-header-title\">Global parameters</p>\n            </header>\n            <div className=\"card-content\">\n              <div className=\"content\"> */}\n        <section className=\"info-tiles\">\n          <div className=\"tile is-ancestor has-text-centered\">\n            <div className=\"tile is-parent\">\n              <article className=\"tile is-child box\">\n                <p className=\"title\">Alpha {this.state.globalparams.alpha / 100}</p>\n                <p className=\"subtitle\">\n                  <input\n                    className=\"slider is-fullwidth is-large is-danger is-circle\"\n                    step=\"1\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={this.state.globalparams.alpha}\n                    type=\"range\"\n                    onChange={e => {\n                      this.setState(\n                        {\n                          globalparams: Object.assign(\n                            {},\n                            this.state.globalparams,\n                            { alpha: e.target.value }\n                          )\n                        },\n                        () => {\n                          if (this.props.onChange) {\n                            this.props.onChange(this.state.globalparams);\n                          }\n                        }\n                      );\n                    }}\n                  />\n                </p>\n              </article>\n              <article className=\"tile is-child box\">\n                <p className=\"title\">\n                  Total time of sim {this.state.globalparams.totaltime}\n                </p>\n                <p className=\"subtitle\">\n                  <input\n                    className=\"slider is-fullwidth is-large is-danger is-circle\"\n                    step=\"1\"\n                    min=\"0\"\n                    max=\"1000\"\n                    value={this.state.globalparams.totaltime}\n                    type=\"range\"\n                    onChange={e => {\n                      this.setState(\n                        {\n                          globalparams: Object.assign(\n                            {},\n                            this.state.globalparams,\n                            { totaltime: e.target.value }\n                          )\n                        },\n                        () => {\n                          if (this.props.onChange) {\n                            this.props.onChange(this.state.globalparams);\n                          }\n                        }\n                      );\n                    }}\n                  />\n                </p>\n              </article>\n            <article className=\"tile is-child box\">\n                <p className=\"title\">\n                  Conviction required {this.state.globalparams.convictionthreshold}\n                </p>\n                <p className=\"subtitle\">\n                  <input\n                    className=\"slider is-fullwidth is-large is-danger is-circle\"\n                    step=\"1\"\n                    min=\"0\"\n                    max=\"200000\"\n                    value={this.state.globalparams.convictionthreshold}\n                    type=\"range\"\n                    onChange={e => {\n                      this.setState(\n                        {\n                          globalparams: Object.assign(\n                            {},\n                            this.state.globalparams,\n                            { convictionthreshold: e.target.value }\n                          )\n                        },\n                        () => {\n                          if (this.props.onChange) {\n                            this.props.onChange(this.state.globalparams);\n                          }\n                        }\n                      );\n                    }}\n                  />\n                </p>\n              </article>              \n            </div>\n            {/* <div className=\"tile is-parent\">\n                            <article className=\"tile is-child box\">\n                                <p className=\"title\">59k</p>\n                                <p className=\"subtitle\">Products</p>\n                            </article>\n                        </div>\n                        <div className=\"tile is-parent\">\n                            <article className=\"tile is-child box\">\n                                <p className=\"title\">3.4k</p>\n                                <p className=\"subtitle\">Open Orders</p>\n                            </article>\n                        </div>\n                        <div className=\"tile is-parent\">\n                            <article className=\"tile is-child box\">\n                                <p className=\"title\">19</p>\n                                <p className=\"subtitle\">Exceptions</p>\n                            </article>\n                        </div> */}\n          </div>\n        </section>\n        {/* </div>\n            </div>\n          </div>\n        </section> */}\n      </div>\n    );\n  }\n}\n\nexport default Me;\n","import React, { Component } from \"react\";\nimport { defaults, Line } from \"react-chartjs-2\";\nimport convictionlib from \"./convictionlib.js\";\nimport \"./sim.css\";\n\nclass Me extends Component {\n\n    constructor(props) {\n        super();\n\n        this.state = {\n            globalparams: props.globalparams,\n            proposal: props.proposal,\n            currenttime: 0,\n            convictiontresholdpassed: false,\n            stakeHistory: [],\n            timeline: undefined,\n            plot: undefined,\n        };\n    }\n\n    componentWillMount() {\n        this.recalc([]);\n        this.restart();\n\n    }\n\n    componentWillReceiveProps(newProps) {\n        //   debugger;\n        this.setState({ globalparams: newProps.globalparams }, () => { this.recalc([]); });\n\n    }\n\n    makecolor(i) {\n        const r = (i * 139) % 255;\n        const g = (i * 251) % 255;\n        const b = (i * 43) % 255;\n        return `rgba(${r},${g},${b},0.3)`;\n    }\n\n    restart() {\n        this.setState({\n            //globalparams: props.globalparams,\n            //proposal: props.proposal,\n            currenttime: 0,\n            convictiontresholdpassed: false,\n            // stakeHistory: [],\n            // timeline: undefined,\n        }, () => {\n\n            let interval = setInterval(() => {\n                // let stakeHistory = [];\n                const newTime = this.state.currenttime + 1;\n                console.log(\"tick\", newTime);\n                if (this.state.globalparams.totaltime > this.state.currenttime && !this.state.convictiontresholdpassed) {\n                    this.setState({ currenttime: newTime }, () => {\n                        this.recalc([]);\n                        // console.log(this.state)\n                    });\n                    // t++;\n                } else {\n                    clearInterval(interval);\n                    if (this.state.convictiontresholdpassed) {\n                        this.recalc([{\n                            t: this.state.currenttime,\n                            desc: `Proposal passed !`\n                        }]);\n                    } else {\n                        this.recalc([[{\n                            t: this.state.currenttime,\n                            desc: `Proposal did not pass before end of sim`\n                        }]]);\n                    }\n                    // this.state.stakeHistory.push({\n                    //     t: this.state.currenttime,\n                    //     desc: `${user.name} changes stake to ${action.tokensstaked}`\n                    // });\n                }\n\n            }, 1);\n\n\n\n        });\n    }\n\n    recalc(stakeHistory) {\n        let labels = [];\n        for (let t = 0; t < this.state.globalparams.totaltime; t++) {\n            labels.push(t);\n        }\n\n\n\n        let datasets = this.state.proposal.convictions.reduce((accum,user, userindex) => {\n            const a = this.state.globalparams.alpha / 100;\n            const D = 10;\n            let y0 = 0;\n            let y1 = y0;\n            let x = 0;\n            let labels = [];\n            let data = [];\n            let data_accent = [];\n\n            let localt = 0; // local time ( = age of current conviction amount - reset every time conviction stake is changed.)\n            let stakeIndex = 0;\n\n            for (let t = 0; t < this.state.currenttime; t++) {\n                // get timeline events for this CV\n\n                const y1 = convictionlib.getConviction(a, D, y0, x, localt);\n                const y1_accent = convictionlib.getConviction_old(a, D, y0, x, localt);\n\n                data.push(y1);\n                data_accent.push(y1_accent);\n\n                // check if user changed his conviction\n                if (\n                    user.stakes &&\n                    user.stakes.length > stakeIndex &&\n                    user.stakes[stakeIndex].time <= t\n                ) {\n                    let action = user.stakes[stakeIndex];\n                    stakeIndex++;\n                    x = action.tokensstaked;\n                    localt = 0;\n                    y0 = y1;\n\n\n                    stakeHistory.push({\n                        t: t,\n                        desc: `${user.name} changes stake to ${action.tokensstaked}`\n                    });\n                }\n\n                localt++;\n            }\n\n            accum.push({\n                label: user.name,\n                fill: false,\n                // backgroundColor: \"rgba(75,192,192,0.4)\",\n                borderColor: this.makecolor(userindex),\n                data: data\n            });\n            accum.push(\n            {\n                label: user.name + \"_accent\",\n                fill: false,\n                // backgroundColor: \"rgba(75,192,192,0.4)\",\n                borderColor: this.makecolor(userindex+25),\n                data: data_accent\n            });\n            return accum;\n        },[]);\n\n        // let convictionthreshold_below = [];\n        // let convictionthreshold_above = [];\n\n        // add a dataset with the total conviction\n        let totalconvictiondata = [];\n        for (let t = 0; t < this.state.currenttime; t++) {\n            let total = 0 * datasets.reduce((accumulator, currentValue) => {\n                return accumulator + currentValue.data[t];\n            }, 0);\n            totalconvictiondata.push(total);\n            if (total < this.state.globalparams.convictionthreshold) {\n                // convictionthreshold_below.push(this.state.globalparams.convictionthreshold);\n                // convictionthreshold_above.push(null);\n            } else {\n                this.setState({ convictiontresholdpassed: true });\n                // convictionthreshold_below.push(null);\n                // convictionthreshold_above.push(this.state.globalparams.convictionthreshold);\n            }\n        }\n\n        let convictionthreshold_below = [];\n        for (let t = 0; t < this.state.globalparams.totaltime; t++) {\n            convictionthreshold_below.push(this.state.globalparams.convictionthreshold);\n        }\n\n        datasets.push({\n            label: \"total\",\n            borderColor: \"rgba(75,192,192,1)\",\n            data: totalconvictiondata\n        });\n\n        datasets.push({\n            fill: true,\n            label: \"required conviction\",\n            borderColor: \"rgba(175,0,0,1)\",\n            data: convictionthreshold_below\n        });\n\n        // datasets.push({\n        //     label: \"required conviction\",\n        //     borderColor: \"rgba(0,175,0,1)\",\n        //     data: convictionthreshold_above\n        // });\n\n        let timeline = stakeHistory.sort((a, b) => {\n            return a.t - b.t;\n        });\n\n        this.setState({\n            plot: {\n                labels: labels,\n                datasets: datasets\n            },\n            timeline: timeline,\n            // stakeHistory: stakeHistory,\n        });\n    }\n\n\n    render() {\n        const timeline = this.state.timeline.map((item, i) => {\n            return (\n                <li key={i}>\n                    at time {item.t} : {item.desc}\n                </li>\n            );\n        });\n\n        return (\n            <div className=\"container\">\n                <section className=\"hero is-info welcome is-small\">\n                    <div className=\"hero-body\">\n                        <div className=\"container\">\n                            <h1 className=\"title\">Proposal : {this.state.proposal.name}</h1>\n                            {this.state.convictiontresholdpassed && (<h1 className=\"title\">PASSED!</h1>)\n\n                            }\n                        </div>\n                    </div>\n                    {/* Alpha= {this.state.alpha / 100}\n          <input\n            class=\"slider is-fullwidth is-large is-danger is-circle\"\n            step=\"1\"\n            min=\"0\"\n            max=\"100\"\n            value={this.state.alpha}\n            type=\"range\"\n            onChange={e => {\n              this.setState({ alpha: e.target.value });\n              this.recalc();\n            }}\n          /> */}\n                </section>\n\n                <div className=\"card\">\n                    <header className=\"card-header\">\n                        <p className=\"card-header-title\">Conviction chart</p>\n                    </header>\n                    <div className=\"card-content\">\n                        <div className=\"content\">\n                            {this.state.plot && <Line data={this.state.plot} />}\n                            <ol>{timeline}</ol>\n                        </div>\n                    </div>\n                </div>\n\n                <button onClick={() => { this.restart() }}>Restart Simulation</button>\n            </div>\n        )\n    }\n}\n\nexport default Me;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\n// import './App.css';\nimport \"bulma/css/bulma.css\";\n// import { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport GlobalParams from \"./components/GlobalParams.js\";\nimport ConvictionVoting from \"./components/ConvictionVoting.js\";\nimport TimeLine from \"./components/TimeLine.js\";\nclass App extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      globalparams: {\n        alpha: 90,\n        totaltime: 100,\n        convictionthreshold: 50000,\n      },\n      proposals: [\n        {\n          timecreated: 0,\n          id: 1,\n          value: 1000,\n          name: \"Spend 1000 xDAI on X\",\n          convictions: [\n            {\n              name: \"Griff\",\n              stakes: [\n                { time: 20, tokensstaked: 10000 },\n                // { time: 50, tokensstaked: 0 }\n              ]\n            },\n            // {\n            //   name: \"Jeff\",\n            //   stakes: [\n            //     { time: 30, tokensstaked: 1000 },\n            //     { time: 60, tokensstaked: 7000 }\n            //   ]\n            // }\n\n          ]\n        }\n        // { id: 2, timecreated: 30, value: 1000, name: \"Spend 2000 xDAI on Y\" }\n      ]\n    };\n  }\n\n  timeChanged(e) {\n    console.log(\"app: time changed\");\n  }\n\n  render() {\n    const votes = this.state.proposals.map((proposal,i) => {\n      return (\n        <div key={i} className=\"tile is-ancestor has-text-centered\">\n          <div className=\"tile is-parent\">\n            <article className=\"tile is-child box\">\n              <ConvictionVoting\n                globalparams={this.state.globalparams}\n                proposal={proposal}\n              />\n            </article>\n          </div>\n        </div>\n      );\n    });\n    return (\n      <div className=\"App\">\n        <section className=\"info-tiles\">\n          <GlobalParams\n            globalparams={this.state.globalparams}\n            onChange={data => {\n              this.setState({ globalparams: data });\n            }}\n          />\n        </section>\n        <section className=\"info-tiles\">{votes}</section>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nclass Me extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      time: 50\n    };\n  }\n  changeTime(e) {\n    console.log(\"time changed \" +  e.target.value);\n    this.setState({ time: e.target.value });\n  }\n\n  render() {\n    return (\n      <section class=\"hero is-info welcome is-small\">\n        <div class=\"hero-body\">\n          <div class=\"container\">\n            <input\n              class=\"slider is-fullwidth is-large is-danger is-circle\"\n              step=\"1\"\n              min=\"0\"\n              max=\"100\"\n              value={this.state.time}\n              type=\"range\"\n              onChange={e => {\n                this.changeTime(e);\n              }}\n            />\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Me;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n    getConviction: (a, D, y0, x, t) => {\n        if (t === 0) {\n            return 0;\n        }\n        let y = y0 + (x - y0) * (1 - 1 / (1 + (t / (10 * a))));\n        return y;\n    },\n\n    getConviction_old: (a, D, y0, x, t) => {\n        let y = y0 * a ** t + (x * (1 - a ** t)) / (1 - a);\n        return y;\n    }\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}