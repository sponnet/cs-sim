{"version":3,"sources":["components/GlobalParams.js","components/ConvictionVoting.js","App.js","components/TimeLine.js","serviceWorker.js","index.js","components/convictionlib.js","logo.svg"],"names":["Me","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","globalparams","_this2","react_default","a","createElement","className","alpha","step","min","max","value","type","onChange","e","setState","assign","target","totaltime","Component","proposal","recalc","newProps","i","g","b","concat","labels","t","push","stakeHistory","datasets","convictions","map","user","userindex","y0","y1","x","data","localt","stakeIndex","convictionlib","getConviction","stakes","length","time","action","tokensstaked","desc","name","label","fill","borderColor","makecolor","totalconvictiondata","_loop","total","reduce","accumulator","currentValue","sort","plot","timeline","item","key","es","App","proposals","timecreated","id","console","log","votes","ConvictionVoting","GlobalParams","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","D","c","Math","floor","y","aD","Dt","pow","aDt","term1","term2","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4cfd2259.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./sim.css\";\n\nclass Me extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      globalparams: props.globalparams\n    };\n  }\n\n  //   componentWillReceiveProps(newProps) {\n  //     this.setState({ globalparams: newProps.globalparams });\n  //   }\n\n  componentWillMount() {}\n\n  render() {\n    return (\n      <div className=\"container\">\n        {/* <section className=\"hero is-info welcome is-small\">\n          <div className=\"card\">\n            <header className=\"card-header\">\n              <p className=\"card-header-title\">Global parameters</p>\n            </header>\n            <div className=\"card-content\">\n              <div className=\"content\"> */}\n        <section className=\"info-tiles\">\n          <div className=\"tile is-ancestor has-text-centered\">\n            <div className=\"tile is-parent\">\n              <article className=\"tile is-child box\">\n                <p className=\"title\">Alpha {this.state.globalparams.alpha / 100}</p>\n                <p className=\"subtitle\">\n                  <input\n                    className=\"slider is-fullwidth is-large is-danger is-circle\"\n                    step=\"1\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={this.state.globalparams.alpha}\n                    type=\"range\"\n                    onChange={e => {\n                      this.setState(\n                        {\n                          globalparams: Object.assign(\n                            {},\n                            this.state.globalparams,\n                            { alpha: e.target.value }\n                          )\n                        },\n                        () => {\n                          if (this.props.onChange) {\n                            this.props.onChange(this.state.globalparams);\n                          }\n                        }\n                      );\n                    }}\n                  />\n                </p>\n              </article>\n              <article className=\"tile is-child box\">\n                <p className=\"title\">\n                  Total time of sim {this.state.globalparams.totaltime}\n                </p>\n                <p className=\"subtitle\">\n                  <input\n                    className=\"slider is-fullwidth is-large is-danger is-circle\"\n                    step=\"1\"\n                    min=\"0\"\n                    max=\"1000\"\n                    value={this.state.globalparams.totaltime}\n                    type=\"range\"\n                    onChange={e => {\n                      this.setState(\n                        {\n                          globalparams: Object.assign(\n                            {},\n                            this.state.globalparams,\n                            { totaltime: e.target.value }\n                          )\n                        },\n                        () => {\n                          if (this.props.onChange) {\n                            this.props.onChange(this.state.globalparams);\n                          }\n                        }\n                      );\n                    }}\n                  />\n                </p>\n              </article>\n            </div>\n            {/* <div className=\"tile is-parent\">\n                            <article className=\"tile is-child box\">\n                                <p className=\"title\">59k</p>\n                                <p className=\"subtitle\">Products</p>\n                            </article>\n                        </div>\n                        <div className=\"tile is-parent\">\n                            <article className=\"tile is-child box\">\n                                <p className=\"title\">3.4k</p>\n                                <p className=\"subtitle\">Open Orders</p>\n                            </article>\n                        </div>\n                        <div className=\"tile is-parent\">\n                            <article className=\"tile is-child box\">\n                                <p className=\"title\">19</p>\n                                <p className=\"subtitle\">Exceptions</p>\n                            </article>\n                        </div> */}\n          </div>\n        </section>\n        {/* </div>\n            </div>\n          </div>\n        </section> */}\n      </div>\n    );\n  }\n}\n\nexport default Me;\n","import React, { Component } from \"react\";\nimport { defaults, Line } from \"react-chartjs-2\";\nimport convictionlib from \"./convictionlib.js\";\nimport \"./sim.css\";\n\nclass Me extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      globalparams: props.globalparams,\n      proposal: props.proposal\n    };\n  }\n\n  componentWillMount() {\n    this.recalc();\n  }\n\n  componentWillReceiveProps(newProps) {\n    //   debugger;\n    this.setState({ globalparams: newProps.globalparams });\n    this.recalc();\n  }\n\n  makecolor(i) {\n    const r = (i * 139) % 255;\n    const g = (i * 251) % 255;\n    const b = (i * 43) % 255;\n    return `rgba(${r},${g},${b},0.3)`;\n  }\n\n  recalc() {\n    let labels = [];\n    for (let t = 0; t < this.state.globalparams.totaltime; t++) {\n      labels.push(t);\n    }\n\n    let stakeHistory = [];\n\n    let datasets = this.state.proposal.convictions.map((user, userindex) => {\n      const a = this.state.globalparams.alpha / 100;\n      const D = 10;\n      let y0 = 0;\n      let y1 = y0;\n      let x = 0;\n      let labels = [];\n      let data = [];\n\n      let localt = 0; // local time ( = age of current conviction amount - reset every time conviction stake is changed.)\n      let stakeIndex = 0;\n\n      for (let t = 0; t < this.state.globalparams.totaltime; t++) {\n        // get timeline events for this CV\n\n        y1 = convictionlib.getConviction(a, D, y0, x, localt);\n\n        data.push(y1);\n\n        // check if user changed his conviction\n        if (\n          user.stakes &&\n          user.stakes.length > stakeIndex &&\n          user.stakes[stakeIndex].time <= t\n        ) {\n          let action = user.stakes[stakeIndex];\n          stakeIndex++;\n          x = action.tokensstaked;\n          localt = 0;\n          y0 = y1;\n\n          // descriptive history\n          stakeHistory.push({\n            t: t,\n            desc: `${user.name} changes stake to ${action.tokensstaked}`\n          });\n        }\n\n        localt++;\n      }\n\n      return {\n        label: user.name,\n        fill: false,\n        // backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: this.makecolor(userindex),\n        data: data\n      };\n    });\n\n    // add a dataset with the total conviction\n    let totalconvictiondata = [];\n    for (let t = 0; t < this.state.globalparams.totaltime; t++) {\n      let total = datasets.reduce((accumulator, currentValue) => {\n        return accumulator + currentValue.data[t];\n      }, 0);\n      totalconvictiondata.push(total);\n    }\n    datasets.push({\n      label: \"total\",\n      borderColor: \"rgba(75,192,192,1)\",\n      data: totalconvictiondata\n    });\n\n    stakeHistory.sort((a, b) => {\n      return a.t - b.t;\n    });\n\n    this.setState({\n      plot: {\n        labels: labels,\n        datasets: datasets\n      },\n      timeline: stakeHistory\n    });\n  }\n\n  render() {\n    const timeline = this.state.timeline.map((item, i) => {\n      return (\n        <li key={i}>\n          {item.t} : {item.desc}\n        </li>\n      );\n    });\n\n    return (\n      <div className=\"container\">\n        <section className=\"hero is-info welcome is-small\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h1 className=\"title\">Proposal : {this.state.proposal.name}</h1>\n            </div>\n          </div>\n          {/* Alpha= {this.state.alpha / 100}\n          <input\n            class=\"slider is-fullwidth is-large is-danger is-circle\"\n            step=\"1\"\n            min=\"0\"\n            max=\"100\"\n            value={this.state.alpha}\n            type=\"range\"\n            onChange={e => {\n              this.setState({ alpha: e.target.value });\n              this.recalc();\n            }}\n          /> */}\n        </section>\n\n        <div className=\"card\">\n          <header className=\"card-header\">\n            <p className=\"card-header-title\">Conviction chart</p>\n          </header>\n          <div className=\"card-content\">\n            <div className=\"content\">\n              {this.state.plot && <Line data={this.state.plot} />}\n              <ol>{timeline}</ol>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Me;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\n// import './App.css';\nimport \"bulma/css/bulma.css\";\n// import { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport GlobalParams from \"./components/GlobalParams.js\";\nimport ConvictionVoting from \"./components/ConvictionVoting.js\";\nimport TimeLine from \"./components/TimeLine.js\";\nclass App extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      globalparams: {\n        alpha: 90,\n        totaltime: 100\n      },\n      proposals: [\n        {\n          timecreated: 0,\n          id: 1,\n          value: 1000,\n          name: \"Spend 1000 xDAI on X\",\n          convictions: [\n            {\n              name: \"Griff\",\n              stakes: [\n                { time: 0, tokensstaked: 1000 },\n                { time: 50, tokensstaked: 0 }\n              ]\n            },\n            {\n              name: \"Jeff\",\n              stakes: [\n                { time: 30, tokensstaked: 1000 },\n                { time: 80, tokensstaked: 7000 }\n              ]\n            }\n\n          ]\n        }\n        // { id: 2, timecreated: 30, value: 1000, name: \"Spend 2000 xDAI on Y\" }\n      ]\n    };\n  }\n\n  timeChanged(e) {\n    console.log(\"app: time changed\");\n  }\n\n  render() {\n    const votes = this.state.proposals.map((proposal,i) => {\n      return (\n        <div key={i} className=\"tile is-ancestor has-text-centered\">\n          <div className=\"tile is-parent\">\n            <article className=\"tile is-child box\">\n              <ConvictionVoting\n                globalparams={this.state.globalparams}\n                proposal={proposal}\n              />\n              ;\n            </article>\n          </div>\n        </div>\n      );\n    });\n    return (\n      <div className=\"App\">\n        <section className=\"info-tiles\">\n          <GlobalParams\n            globalparams={this.state.globalparams}\n            onChange={data => {\n              this.setState({ globalparams: data });\n            }}\n          />\n        </section>\n        <section className=\"info-tiles\">{votes}</section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nclass Me extends Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      time: 50\n    };\n  }\n  changeTime(e) {\n    console.log(\"time changed \" +  e.target.value);\n    this.setState({ time: e.target.value });\n  }\n\n  render() {\n    return (\n      <section class=\"hero is-info welcome is-small\">\n        <div class=\"hero-body\">\n          <div class=\"container\">\n            <input\n              class=\"slider is-fullwidth is-large is-danger is-circle\"\n              step=\"1\"\n              min=\"0\"\n              max=\"100\"\n              value={this.state.time}\n              type=\"range\"\n              onChange={e => {\n                this.changeTime(e);\n              }}\n            />\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Me;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n  getConviction: (a, D, y0, x, t) => {\n    \n    const c = i => Math.floor(i);\n\n    // let y = y0 * a ** t + (x * (1 - a ** t)) / (1 - a);\n    // i believe this should be \n    let y = y0 * a + x\n    // as long as x is the current token amount at time t\n    // t should not need to appear in this equation at all\n    \n    // Solidity code\n    const aD = c(a * D);\n    const Dt = c(D ** t);\n    const aDt = c(aD ** t);\n    const term1 = c(aDt * y0);\n    const term2 = c(x * D * c(Dt - aDt)) / c(D - aD);\n    const ySOL = c((term1 + term2) / Dt);\n    const diff = 100 * (y / ySOL - 1);\n   \n    return y;\n  }\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}